// Elementos da interface
const updateButton = document.getElementById('update');
const testConnectionButton = document.getElementById('test-connection');
const minimizeBtn = document.getElementById('minimize-btn');
const maximizeBtn = document.getElementById('maximize-btn');
const closeBtn = document.getElementById('close-btn');
const statusText = document.getElementById('status');

// Elementos da barra de progresso
const downloadProgress = document.getElementById('download-progress');
const downloadStatus = document.getElementById('download-status');
const downloadPercentage = document.getElementById('download-percentage');
const progressBar = document.getElementById('progress-bar');
const downloadSpeed = document.getElementById('download-speed');
const downloadSize = document.getElementById('download-size');
const downloadTime = document.getElementById('download-time');

// Elementos do auto updater
const autoUpdateStatus = document.getElementById('auto-update-status');
const autoUpdateButton = document.getElementById('auto-update-button');

// Elemento para exibir a vers√£o do app
const versionDisplay = document.getElementById('version-display');

// Vari√°veis para controle do auto updater
let isAutoUpdateInProgress = false;
let currentUpdateInfo = null;

// Fun√ß√µes para gerenciar a barra de progresso
function showDownloadProgress() {
  downloadProgress.style.display = 'block';
  downloadStatus.textContent = 'Baixando...';
  downloadPercentage.textContent = '0%';
  progressBar.style.width = '0%';
  downloadSpeed.textContent = '0 MB/s';
  downloadSize.textContent = '0 MB / 0 MB';
  downloadTime.textContent = '--:--';
}

function hideDownloadProgress() {
  downloadProgress.style.display = 'none';
}

function updateDownloadProgress(data) {
  downloadStatus.textContent = 'Baixando...';
  downloadPercentage.textContent = `${data.progress}%`;
  progressBar.style.width = `${data.progress}%`;
  downloadSpeed.textContent = data.speedFormatted;
  downloadSize.textContent = `${data.downloadedFormatted} / ${data.totalFormatted}`;
  downloadTime.textContent = data.timeRemainingFormatted;
}

function showDownloadComplete() {
  downloadStatus.textContent = 'Download Conclu√≠do!';
  downloadPercentage.textContent = '100%';
  progressBar.style.width = '100%';
  progressBar.style.background = 'linear-gradient(45deg, #28a745, #20c997)';
  
  // Esconde a barra ap√≥s 3 segundos
  setTimeout(() => {
    hideDownloadProgress();
    progressBar.style.background = 'linear-gradient(45deg, #667eea, #764ba2)';
  }, 3000);
}

// Fun√ß√µes para gerenciar o auto updater
async function checkForLauncherUpdates() {
  if (isAutoUpdateInProgress) {
    console.log('Verifica√ß√£o de atualiza√ß√£o j√° em andamento');
    return;
  }

  try {
    isAutoUpdateInProgress = true;
    autoUpdateButton.disabled = true;
    autoUpdateButton.textContent = 'üîç Verificando...';
    
    updateAutoUpdateStatus('Verificando atualiza√ß√µes do launcher...', 'info');
    
    const result = await window.electronAPI.checkForUpdates();
    console.log('Resultado da verifica√ß√£o:', result);
    
    if (result.success) {
      updateAutoUpdateStatus('Verifica√ß√£o iniciada com sucesso', 'success');
    } else {
      updateAutoUpdateStatus(`Erro: ${result.error}`, 'error');
    }
  } catch (error) {
    console.error('Erro ao verificar atualiza√ß√µes:', error);
    updateAutoUpdateStatus(`Erro: ${error.message}`, 'error');
  } finally {
    isAutoUpdateInProgress = false;
    autoUpdateButton.disabled = false;
    autoUpdateButton.textContent = 'üîÑ Verificar Atualiza√ß√µes do Launcher';
  }
}

function updateAutoUpdateStatus(message, type = 'info') {
  autoUpdateStatus.textContent = message;
  
  switch (type) {
    case 'success':
      autoUpdateStatus.style.backgroundColor = '#d4edda';
      autoUpdateStatus.style.color = '#155724';
      autoUpdateStatus.style.border = '1px solid #c3e6cb';
      break;
    case 'error':
      autoUpdateStatus.style.backgroundColor = '#f8d7da';
      autoUpdateStatus.style.color = '#721c24';
      autoUpdateStatus.style.border = '1px solid #f5c6cb';
      break;
    case 'warning':
      autoUpdateStatus.style.backgroundColor = '#fff3cd';
      autoUpdateStatus.style.color = '#856404';
      autoUpdateStatus.style.border = '1px solid #ffeaa7';
      break;
    case 'info':
    default:
      autoUpdateStatus.style.backgroundColor = '#e3f2fd';
      autoUpdateStatus.style.color = '#1565c0';
      autoUpdateStatus.style.border = '1px solid #bbdefb';
      break;
  }
}

// Fun√ß√£o para atualizar a exibi√ß√£o da vers√£o
async function updateVersionDisplay() {
  try {
    const updateStatus = await window.electronAPI.getUpdateStatus();
    const currentVersion = updateStatus.currentVersion || 'Desconhecida';
    versionDisplay.textContent = `Vers√£o: ${currentVersion}`;
    versionDisplay.style.backgroundColor = '#e8f5e8';
    versionDisplay.style.color = '#2e7d32';
    versionDisplay.style.border = '1px solid #a5d6a7';
  } catch (error) {
    console.error('Erro ao obter vers√£o:', error);
    versionDisplay.textContent = 'Vers√£o: Erro ao carregar';
    versionDisplay.style.backgroundColor = '#ffebee';
    versionDisplay.style.color = '#c62828';
    versionDisplay.style.border = '1px solid #ffcdd2';
  }
}

function handleUpdateStatus(data) {
  console.log('Status da atualiza√ß√£o recebido:', data);
  
  switch (data.status) {
    case 'checking':
      updateAutoUpdateStatus('üîç Verificando atualiza√ß√µes...', 'info');
      break;
      
    case 'available':
      currentUpdateInfo = data.info;
      const newVersion = data.newVersion || 'nova vers√£o';
      updateAutoUpdateStatus(
        `üÜï Atualiza√ß√£o dispon√≠vel: ${newVersion}! Baixando automaticamente...`, 
        'success'
      );
      
      // Atualiza a exibi√ß√£o da vers√£o com a nova vers√£o dispon√≠vel
      if (data.newVersion) {
        versionDisplay.textContent = `Vers√£o: ${data.currentVersion} ‚Üí ${data.newVersion}`;
        versionDisplay.style.backgroundColor = '#fff3cd';
        versionDisplay.style.color = '#856404';
        versionDisplay.style.border = '1px solid #ffeaa7';
      }
      
      // Mostra bot√£o para instalar quando dispon√≠vel
      if (autoUpdateButton) {
        autoUpdateButton.textContent = '‚¨áÔ∏è Baixando Atualiza√ß√£o...';
        autoUpdateButton.disabled = true;
      }
      break;
      
    case 'downloading':
      if (data.progress) {
        const percent = Math.round(data.progress.percent || 0);
        updateAutoUpdateStatus(
          `‚¨áÔ∏è Baixando atualiza√ß√£o: ${percent}%`, 
          'info'
        );
      } else {
        updateAutoUpdateStatus('‚¨áÔ∏è Baixando atualiza√ß√£o...', 'info');
      }
      break;
      
    case 'downloaded':
      updateAutoUpdateStatus(
        '‚úÖ Atualiza√ß√£o baixada! Clique para instalar ou reinicie o aplicativo.', 
        'success'
      );
      
      // Atualiza a exibi√ß√£o da vers√£o para mostrar que est√° pronta para instalar
      if (currentUpdateInfo && currentUpdateInfo.version) {
        versionDisplay.textContent = `Vers√£o: ${currentUpdateInfo.version} (Pronta para instalar)`;
        versionDisplay.style.backgroundColor = '#d4edda';
        versionDisplay.style.color = '#155724';
        versionDisplay.style.border = '1px solid #c3e6cb';
      }
      
      // Habilita bot√£o para instalar
      if (autoUpdateButton) {
        autoUpdateButton.textContent = 'üöÄ Instalar Atualiza√ß√£o';
        autoUpdateButton.disabled = false;
        autoUpdateButton.onclick = installLauncherUpdate;
      }
      break;
      
    case 'not-available':
      updateAutoUpdateStatus('‚úÖ Voc√™ j√° tem a vers√£o mais recente do launcher!', 'success');
      break;
      
    case 'error':
      updateAutoUpdateStatus(`‚ùå Erro: ${data.error}`, 'error');
      
      // Reabilita bot√£o em caso de erro
      if (autoUpdateButton) {
        autoUpdateButton.disabled = false;
        autoUpdateButton.textContent = 'üîÑ Verificar Atualiza√ß√µes do Launcher';
        autoUpdateButton.onclick = checkForLauncherUpdates;
      }
      break;
      
    default:
      updateAutoUpdateStatus(`Status desconhecido: ${data.status}`, 'warning');
      break;
  }
}

async function installLauncherUpdate() {
  try {
    updateAutoUpdateStatus('üöÄ Instalando atualiza√ß√£o...', 'info');
    
    const result = await window.electronAPI.installUpdate();
    console.log('Resultado da instala√ß√£o:', result);
    
    if (result.success) {
      updateAutoUpdateStatus('üîÑ Reiniciando para aplicar atualiza√ß√£o...', 'success');
    } else {
      updateAutoUpdateStatus(`Erro na instala√ß√£o: ${result.error}`, 'error');
    }
  } catch (error) {
    console.error('Erro ao instalar atualiza√ß√£o:', error);
    updateAutoUpdateStatus(`Erro: ${error.message}`, 'error');
  }
}

// Event listeners para os bot√µes da barra de t√≠tulo
minimizeBtn?.addEventListener('click', () => {
  window.electronAPI.minimizeWindow();
});

maximizeBtn?.addEventListener('click', () => {
  window.electronAPI.maximizeWindow();
});

closeBtn?.addEventListener('click', () => {
  window.electronAPI.closeWindow();
});

// Fun√ß√£o para verificar o status do jogo
async function checkGameStatus() {
  try {
    console.log('Verificando status do jogo...');
    const status = await window.electronAPI.checkGameStatus();
    console.log('Status recebido:', status);
    
    // Verifica se o processo est√° rodando
    const processStatus = await window.electronAPI.checkGameProcess();
    console.log('Status do processo:', processStatus);
    
    // Combina o status do jogo com o status do processo
    const combinedStatus = {
      ...status,
      isProcessRunning: processStatus.isRunning
    };
    
    updateUI(combinedStatus);
  } catch (error) {
    console.error('Erro ao verificar status:', error);
    updateUI({ isInstalled: false, isUpdated: false, currentVersion: null, isProcessRunning: false });
  }
}

// Fun√ß√£o para atualizar a interface baseada no status
function updateUI(status) {
  console.log('Atualizando UI com status:', status);
  
  if (status.isInstalled && status.isUpdated) {
    if (status.isProcessRunning) {
      // Jogo instalado, atualizado e rodando - Mostra bot√£o de parar
      if (updateButton) {
        updateButton.textContent = '‚èπÔ∏è Parar Jogo';
        updateButton.disabled = false;
        updateButton.style.background = 'linear-gradient(45deg, #dc3545, #c82333)';
      }
      statusText.textContent = `üéÆ Jogo rodando (Release #${status.currentVersion}) - Clique em "Parar" para encerrar`;
      statusText.style.backgroundColor = '#d1ecf1';
      statusText.style.color = '#0c5460';
      statusText.style.border = '1px solid #bee5eb';
    } else {
      // Jogo instalado e atualizado mas n√£o rodando - Mostra bot√£o de jogar
      if (updateButton) {
        updateButton.textContent = 'üéÆ Jogar';
        updateButton.disabled = false;
        updateButton.style.background = 'linear-gradient(45deg, #28a745, #20c997)';
      }
      statusText.textContent = `‚úÖ Jogo instalado e atualizado (Release #${status.currentVersion}) - Clique em "Jogar" para iniciar`;
      statusText.style.backgroundColor = '#d4edda';
      statusText.style.color = '#155724';
      statusText.style.border = '1px solid #c3e6cb';
    }
  } else if (status.isInstalled && !status.isUpdated) {
    // Jogo instalado mas desatualizado - Mostra bot√£o de atualizar
    if (updateButton) {
      updateButton.textContent = 'üîÑ Atualizar Jogo';
      updateButton.disabled = false;
      updateButton.style.background = 'linear-gradient(45deg, #ffc107, #fd7e14)';
    }
    
    if (status.latestVersion) {
      statusText.textContent = `‚ö†Ô∏è Atualiza√ß√£o dispon√≠vel! Release atual: #${status.currentVersion} ‚Üí Nova release: #${status.latestVersion}`;
    } else {
      statusText.textContent = `‚ö†Ô∏è Jogo instalado mas desatualizado (Release #${status.currentVersion})`;
    }
    statusText.style.backgroundColor = '#fff3cd';
    statusText.style.color = '#856404';
    statusText.style.border = '1px solid #ffeaa7';
  } else if (status.needsUpdate && status.updateAvailable) {
    // Jogo precisa de atualiza√ß√£o e h√° uma dispon√≠vel
    if (updateButton) {
      updateButton.textContent = 'üîÑ Atualizar Jogo';
      updateButton.disabled = false;
      updateButton.style.background = 'linear-gradient(45deg, #ffc107, #fd7e14)';
    }
    
    if (status.latestVersion) {
      statusText.textContent = `üÜï Nova release dispon√≠vel: #${status.latestVersion}! Clique em "Atualizar" para baixar.`;
    } else {
      statusText.textContent = 'üîÑ Atualiza√ß√£o dispon√≠vel! Clique em "Atualizar" para baixar.';
    }
    statusText.style.backgroundColor = '#fff3cd';
    statusText.style.color = '#856404';
    statusText.style.border = '1px solid #ffeaa7';
  } else {
    // Jogo n√£o instalado - Mostra bot√£o de baixar
    if (updateButton) {
      updateButton.textContent = '‚¨áÔ∏è Baixar Jogo';
      updateButton.disabled = false;
      updateButton.style.background = 'linear-gradient(45deg, #667eea, #764ba2)';
    }
    
    if (status.latestVersion) {
      statusText.textContent = `‚¨áÔ∏è Jogo n√£o instalado. Release dispon√≠vel: #${status.latestVersion}`;
    } else {
      statusText.textContent = '‚ùå Jogo n√£o instalado';
    }
    statusText.style.backgroundColor = '#f8d7da';
    statusText.style.color = '#721c24';
    statusText.style.border = '1px solid #f5c6cb';
  }
}

// Event listener para o bot√£o de auto updater
autoUpdateButton?.addEventListener('click', checkForLauncherUpdates);

// Event listener para o bot√£o de teste de conectividade
testConnectionButton?.addEventListener('click', async () => {
  try {
    testConnectionButton.disabled = true;
    testConnectionButton.textContent = 'Testando...';
    
    statusText.textContent = 'üîç Testando conectividade com GitHub...';
    statusText.style.backgroundColor = '#e3f2fd';
    statusText.style.color = '#1565c0';
    statusText.style.border = '1px solid #bbdefb';
    
    const result = await window.electronAPI.testGitHubConnection();
    
    if (result.success) {
      statusText.textContent = '‚úÖ Conex√£o com GitHub funcionando!';
      statusText.style.backgroundColor = '#d4edda';
      statusText.style.color = '#155724';
      statusText.style.border = '1px solid #c3e6cb';
      console.log('Teste de conectividade bem-sucedido:', result.data);
    } else {
      statusText.textContent = `‚ùå Erro na conex√£o: ${result.error}`;
      statusText.style.backgroundColor = '#f8d7da';
      statusText.style.color = '#721c24';
      statusText.style.border = '1px solid #f5c6cb';
      console.error('Teste de conectividade falhou:', result.error);
    }
  } catch (error) {
    console.error('Erro no teste:', error);
    statusText.textContent = `‚ùå Erro no teste: ${error.message}`;
    statusText.style.backgroundColor = '#f8d7da';
    statusText.style.color = '#721c24';
    statusText.style.border = '1px solid #f5c6cb';
  } finally {
    testConnectionButton.disabled = false;
    testConnectionButton.textContent = 'Testar Conex√£o';
  }
});

// Event listener para o bot√£o principal (baixar/atualizar/jogar/parar)
updateButton?.addEventListener('click', async () => {
  if (!updateButton) return;

  console.log('Bot√£o clicado! Texto atual:', updateButton.textContent);

  try {
    updateButton.disabled = true;
    const originalText = updateButton.textContent; // Armazena o texto original
    updateButton.textContent = 'Processando...';
    
    console.log('Texto original do bot√£o:', originalText);
    
    if (originalText.includes('Baixar')) {
      // Baixar o jogo
      console.log('Iniciando processo de download...');
      statusText.textContent = 'üîç Verificando atualiza√ß√µes...';
      statusText.style.backgroundColor = '#e3f2fd';
      statusText.style.color = '#1565c0';
      statusText.style.border = '1px solid #bbdefb';
      
      const release = await window.electronAPI.checkUpdate();
      console.log('Release recebido:', release);
      
      // Usa o asset de jogo espec√≠fico se dispon√≠vel
      let asset = null;
      if (release.gameAsset) {
        asset = release.gameAsset;
        console.log('Usando asset de jogo espec√≠fico:', asset.name);
      } else {
        // Fallback: procura por qualquer arquivo ZIP
        if (!release.assets || !Array.isArray(release.assets)) {
          throw new Error('Release n√£o tem assets v√°lidos');
        }
        
        asset = release.assets.find((a) => a.name.endsWith('.zip'));
        if (asset) {
          console.log('Asset ZIP encontrado como fallback:', asset.name);
        }
      }
      
             if (asset) {
         console.log('Asset encontrado:', asset);
         statusText.textContent = '‚¨áÔ∏è Baixando jogo... (isso pode demorar alguns minutos)';
         statusText.style.backgroundColor = '#fff3e0';
         statusText.style.color = '#ef6c00';
         statusText.style.border = '1px solid #ffcc02';
         
         // Mostra a barra de progresso
         showDownloadProgress();
         
         await window.electronAPI.downloadGame(asset.browser_download_url);
         
         // Mostra download conclu√≠do
         showDownloadComplete();
         
         statusText.textContent = '‚úÖ Jogo baixado com sucesso!';
         statusText.style.backgroundColor = '#d4edda';
         statusText.style.color = '#155724';
         statusText.style.border = '1px solid #c3e6cb';
         
         alert('Jogo baixado com sucesso!');
         
         // Reverte o status ap√≥s download
         await checkGameStatus();
       } else {
        throw new Error('Nenhum arquivo de jogo encontrado para download');
      }
    } else if (originalText.includes('Atualizar')) {
      // Atualizar o jogo
      console.log('Iniciando processo de atualiza√ß√£o...');
      statusText.textContent = 'üîç Verificando atualiza√ß√µes...';
      statusText.style.backgroundColor = '#e3f2fd';
      statusText.style.color = '#1565c0';
      statusText.style.border = '1px solid #bbdefb';
      
      const release = await window.electronAPI.checkUpdate();
      console.log('Release recebido:', release);
      
      // Usa o asset de jogo espec√≠fico se dispon√≠vel
      let asset = null;
      if (release.gameAsset) {
        asset = release.gameAsset;
        console.log('Usando asset de jogo espec√≠fico para atualiza√ß√£o:', asset.name);
      } else {
        // Fallback: procura por qualquer arquivo ZIP
        if (!release.assets || !Array.isArray(release.assets)) {
          throw new Error('Release n√£o tem assets v√°lidos');
        }
        
        asset = release.assets.find((a) => a.name.endsWith('.zip'));
        if (asset) {
          console.log('Asset ZIP encontrado como fallback para atualiza√ß√£o:', asset.name);
        }
      }
      
             if (asset) {
         console.log('Asset encontrado:', asset);
         statusText.textContent = '‚¨áÔ∏è Atualizando jogo... (isso pode demorar alguns minutos)';
         statusText.style.backgroundColor = '#fff3e0';
         statusText.style.color = '#ef6c00';
         statusText.style.border = '1px solid #ffcc02';
         
         // Mostra a barra de progresso
         showDownloadProgress();
         
         await window.electronAPI.downloadGame(asset.browser_download_url);
         
         // Mostra download conclu√≠do
         showDownloadComplete();
         
         statusText.textContent = '‚úÖ Jogo atualizado com sucesso!';
         statusText.style.backgroundColor = '#d4edda';
         statusText.style.color = '#155724';
         statusText.style.border = '1px solid #c3e6cb';
         
         alert('Jogo atualizado com sucesso!');
         
         // Reverte o status ap√≥s atualiza√ß√£o
         await checkGameStatus();
       } else {
        throw new Error('Nenhum arquivo de jogo encontrado para atualiza√ß√£o');
      }
    } else if (originalText.includes('Jogar')) {
      // Jogar o jogo
      console.log('Iniciando jogo...');
      statusText.textContent = 'üéÆ Iniciando jogo...';
      statusText.style.backgroundColor = '#e8f5e8';
      statusText.style.color = '#2e7d32';
      statusText.style.border = '1px solid #c8e6c9';
      
      try {
        await window.electronAPI.launchGame();
        statusText.textContent = 'üéÆ Jogo iniciado!';
        statusText.style.backgroundColor = '#d4edda';
        statusText.style.color = '#155724';
        statusText.style.border = '1px solid #c3e6cb';
        
        // Aguarda um pouco e verifica o status novamente para atualizar o bot√£o
        setTimeout(async () => {
          await checkGameStatus();
        }, 2000);
      } catch (error) {
        console.error('Erro ao executar jogo:', error);
        statusText.textContent = `‚ùå Erro ao executar jogo: ${error.message}`;
        statusText.style.backgroundColor = '#f8d7da';
        statusText.style.color = '#721c24';
        statusText.style.border = '1px solid #f5c6cb';
        alert(`Erro ao executar jogo: ${error.message}`);
      }
    } else if (originalText.includes('Parar')) {
      // Parar o jogo
      console.log('Parando jogo...');
      statusText.textContent = '‚èπÔ∏è Parando jogo...';
      statusText.style.backgroundColor = '#f8d7da';
      statusText.style.color = '#721c24';
      statusText.style.border = '1px solid #f5c6cb';
      
      try {
        const result = await window.electronAPI.stopGameProcess();
        console.log('Resultado da parada:', result);
        
        statusText.textContent = `‚úÖ ${result.message}`;
        statusText.style.backgroundColor = '#d4edda';
        statusText.style.color = '#155724';
        statusText.style.border = '1px solid #c3e6cb';
        
        // Verifica o status novamente para atualizar o bot√£o
        await checkGameStatus();
      } catch (error) {
        console.error('Erro ao parar jogo:', error);
        statusText.textContent = `‚ùå Erro ao parar jogo: ${error.message}`;
        statusText.style.backgroundColor = '#f8d7da';
        statusText.style.color = '#721c24';
        statusText.style.border = '1px solid #f5c6cb';
        alert(`Erro ao parar jogo: ${error.message}`);
      }
    } else {
      // Verificar atualiza√ß√µes (fallback)
      console.log('Verificando atualiza√ß√µes...');
      statusText.textContent = 'üîç Verificando atualiza√ß√µes...';
      statusText.style.backgroundColor = '#e3f2fd';
      statusText.style.color = '#1565c0';
      statusText.style.border = '1px solid #bbdefb';
      
      await checkGameStatus();
    }
  } catch (error) {
    console.error('Erro:', error);
    
    statusText.textContent = `‚ùå Erro: ${error.message}`;
    statusText.style.backgroundColor = '#f8d7da';
    statusText.style.color = '#721c24';
    statusText.style.border = '1px solid #f5c6cb';
    
    alert(`Erro: ${error.message}`);
  } finally {
    updateButton.disabled = false;
    // S√≥ verifica o status se n√£o for uma a√ß√£o de parar (para evitar loop)
    if (!originalText.includes('Parar')) {
      await checkGameStatus();
    }
  }
});

// Event listener para o bot√£o de jogar
// playButton?.addEventListener('click', () => {
//   try {
//     window.electronAPI.launchGame();
//   } catch (error) {
//     console.error('Erro ao executar jogo:', error);
//     alert(`Erro ao executar jogo: ${error.message}`);
//   }
// });

// Configura o listener de progresso do download
window.electronAPI.onDownloadProgress((event, data) => {
  updateDownloadProgress(data);
});

// Configura o listener de status do auto updater
window.electronAPI.onUpdateStatus((event, data) => {
  handleUpdateStatus(data);
});

// Verifica o status automaticamente ao carregar a p√°gina
document.addEventListener('DOMContentLoaded', async () => {
  // Verifica o status do jogo
  checkGameStatus();
  
  // Atualiza a exibi√ß√£o da vers√£o
  await updateVersionDisplay();
  
  // Verifica o status inicial do auto updater
  try {
    const updateStatus = await window.electronAPI.getUpdateStatus();
    console.log('Status inicial do auto updater:', updateStatus);
    
    if (updateStatus.updateInfo) {
      currentUpdateInfo = updateStatus.updateInfo;
      updateAutoUpdateStatus(
        `üÜï Atualiza√ß√£o dispon√≠vel: ${updateStatus.updateInfo.version || 'nova vers√£o'}!`, 
        'success'
      );
      
      if (autoUpdateButton) {
        autoUpdateButton.textContent = 'üöÄ Instalar Atualiza√ß√£o';
        autoUpdateButton.onclick = installLauncherUpdate;
      }
    } else {
      updateAutoUpdateStatus('‚úÖ Launcher atualizado', 'success');
    }
  } catch (error) {
    console.error('Erro ao obter status do auto updater:', error);
    updateAutoUpdateStatus('‚ùå Erro ao verificar status', 'error');
  }
});
